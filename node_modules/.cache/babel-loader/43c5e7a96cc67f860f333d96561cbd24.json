{"ast":null,"code":"import * as TYPES from \"./cartPreviewActionType\";\nimport { itemQuantity } from \"./cartPreviewUtils\";\nconst initialState = {\n  displayPreview: false,\n  items: [],\n  totalPrice: 0\n};\n\nconst cartPreviewReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case TYPES.TOGGLE_CART_PREVIEW:\n      return { ...state,\n        displayPreview: !state.displayPreview\n      };\n\n    case TYPES.ADD_ITEM:\n      return { //it returns new Set of unique items\n        ...state,\n        totalPrice: state.totalPrice + action.itemPrice,\n        items: itemQuantity([...state.items, action.item])\n      };\n\n    case TYPES.INCREASE_QUANTITY:\n      return { ...state,\n        totalPrice: state.totalPrice + action.itemPrice,\n        items: state.items.map(item => {\n          if (item.id === action.itemId) {\n            let stringItem = JSON.stringify(item);\n            localStorage.setItem(itemId, stringItem);\n            return { ...item,\n              quantity: item.quantity += 1\n            };\n          } else {\n            return item;\n          }\n        })\n      };\n\n    case TYPES.DECREASE_QUANTITY:\n      return { ...state,\n        totalPrice: state.totalPrice - action.itemPrice,\n        items: state.items.map(item => {\n          if (item.id === action.itemId) {\n            return { ...item,\n              quantity: item.quantity -= 1\n            };\n          } else {\n            return item;\n          }\n        })\n      };\n\n    case TYPES.REMOVE_ITEM:\n      return { ...state,\n        totalPrice: state.totalPrice - action.itemPrice * action.quantity,\n        items: state.items.filter(item => item.id !== action.itemId)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default cartPreviewReducer;","map":{"version":3,"sources":["C:/Users/USER/Desktop/Shop/src/Redux/cartPreview/cartPreviewReducer.js"],"names":["TYPES","itemQuantity","initialState","displayPreview","items","totalPrice","cartPreviewReducer","state","action","type","TOGGLE_CART_PREVIEW","ADD_ITEM","itemPrice","item","INCREASE_QUANTITY","map","id","itemId","stringItem","JSON","stringify","localStorage","setItem","quantity","DECREASE_QUANTITY","REMOVE_ITEM","filter"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,yBAAvB;AACA,SACIC,YADJ,QAEO,oBAFP;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,cAAc,EAAE,KADC;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,UAAU,EAAE;AAHK,CAArB;;AAMA,MAAMC,kBAAkB,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACzD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,KAAK,CAACU,mBAAX;AACI,aAAO,EACH,GAAGH,KADA;AAEHJ,QAAAA,cAAc,EAAE,CAACI,KAAK,CAACJ;AAFpB,OAAP;;AAIJ,SAAKH,KAAK,CAACW,QAAX;AACI,aAAO,EACH;AACA,WAAGJ,KAFA;AAGHF,QAAAA,UAAU,EAAEE,KAAK,CAACF,UAAN,GAAmBG,MAAM,CAACI,SAHnC;AAICR,QAAAA,KAAK,EAAEH,YAAY,CAAC,CAAC,GAAGM,KAAK,CAACH,KAAV,EAAiBI,MAAM,CAACK,IAAxB,CAAD;AAJpB,OAAP;;AAMJ,SAAKb,KAAK,CAACc,iBAAX;AACI,aAAO,EACH,GAAGP,KADA;AAEHF,QAAAA,UAAU,EAAEE,KAAK,CAACF,UAAN,GAAmBG,MAAM,CAACI,SAFnC;AAGCR,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYW,GAAZ,CAAiBF,IAAD,IAAU;AAC7B,cAAIA,IAAI,CAACG,EAAL,KAAYR,MAAM,CAACS,MAAvB,EAA+B;AAG3B,gBAAIC,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAjB;AACpBQ,YAAAA,YAAY,CAACC,OAAb,CAAqBL,MAArB,EAA6BC,UAA7B;AAGoB,mBAAO,EACH,GAAGL,IADA;AAEHU,cAAAA,QAAQ,EAAGV,IAAI,CAACU,QAAL,IAAiB;AAFzB,aAAP;AAKH,WAZD,MAYO;AACH,mBAAOV,IAAP;AACH;AACJ,SAhBM;AAHR,OAAP;;AAqBJ,SAAKb,KAAK,CAACwB,iBAAX;AACI,aAAO,EACH,GAAGjB,KADA;AAEHF,QAAAA,UAAU,EAAEE,KAAK,CAACF,UAAN,GAAmBG,MAAM,CAACI,SAFnC;AAGCR,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYW,GAAZ,CAAiBF,IAAD,IAAU;AAC7B,cAAIA,IAAI,CAACG,EAAL,KAAYR,MAAM,CAACS,MAAvB,EAA+B;AAC3B,mBAAO,EACH,GAAGJ,IADA;AAEHU,cAAAA,QAAQ,EAAGV,IAAI,CAACU,QAAL,IAAiB;AAFzB,aAAP;AAIH,WALD,MAKO;AACH,mBAAOV,IAAP;AACH;AACJ,SATM;AAHR,OAAP;;AAcJ,SAAKb,KAAK,CAACyB,WAAX;AACI,aAAO,EACH,GAAGlB,KADA;AAEHF,QAAAA,UAAU,EAAEE,KAAK,CAACF,UAAN,GAAmBG,MAAM,CAACI,SAAP,GAAmBJ,MAAM,CAACe,QAFtD;AAGCnB,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYsB,MAAZ,CAAoBb,IAAD,IAAUA,IAAI,CAACG,EAAL,KAAYR,MAAM,CAACS,MAAhD;AAHR,OAAP;;AAKJ;AACI,aAAOV,KAAP;AAzDR;AA2DH,CA5DD;;AA8DA,eAAeD,kBAAf","sourcesContent":["import * as TYPES from \"./cartPreviewActionType\";\r\nimport {\r\n    itemQuantity\r\n} from \"./cartPreviewUtils\";\r\nconst initialState = {\r\n    displayPreview: false,\r\n    items: [],\r\n    totalPrice: 0,\r\n};\r\n\r\nconst cartPreviewReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case TYPES.TOGGLE_CART_PREVIEW:\r\n            return {\r\n                ...state,\r\n                displayPreview: !state.displayPreview,\r\n            };\r\n        case TYPES.ADD_ITEM:\r\n            return {\r\n                //it returns new Set of unique items\r\n                ...state,\r\n                totalPrice: state.totalPrice + action.itemPrice,\r\n                    items: itemQuantity([...state.items, action.item]),                  \r\n            };\r\n        case TYPES.INCREASE_QUANTITY:\r\n            return {\r\n                ...state,\r\n                totalPrice: state.totalPrice + action.itemPrice,\r\n                    items: state.items.map((item) => {\r\n                        if (item.id === action.itemId) {\r\n\r\n\r\n                            let stringItem = JSON.stringify(item);\r\n        localStorage.setItem(itemId, stringItem);\r\n\r\n\r\n                            return {\r\n                                ...item,\r\n                                quantity: (item.quantity += 1)\r\n                       \r\n                            };\r\n                        } else {\r\n                            return item;\r\n                        }\r\n                    }),\r\n            };\r\n        case TYPES.DECREASE_QUANTITY:\r\n            return {\r\n                ...state,\r\n                totalPrice: state.totalPrice - action.itemPrice,\r\n                    items: state.items.map((item) => {\r\n                        if (item.id === action.itemId) {\r\n                            return {\r\n                                ...item,\r\n                                quantity: (item.quantity -= 1),\r\n                            };\r\n                        } else {\r\n                            return item;\r\n                        }\r\n                    }),\r\n            };\r\n        case TYPES.REMOVE_ITEM:\r\n            return {\r\n                ...state,\r\n                totalPrice: state.totalPrice - action.itemPrice * action.quantity,\r\n                    items: state.items.filter((item) => item.id !== action.itemId),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default cartPreviewReducer;"]},"metadata":{},"sourceType":"module"}